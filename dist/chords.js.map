{"version":3,"sources":["webpack://chords/webpack/universalModuleDefinition","webpack://chords/webpack/bootstrap","webpack://chords/./src/caculators.js","webpack://chords/./src/index.js","webpack://chords/./src/maps.js","webpack://chords/./src/utils.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAKlB;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,sBAAsB,qDAAoB;AAC1C,uBAAuB,6CAAO;;AAE9B;AACA,yBAAyB,+CAAS;AAClC,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL,mBAAmB,iBAAiB;AACpC,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;;AAEA,qBAAqB,0DAAyB;AAC9C,6BAA6B,0DAAyB;AACtD,kBAAkB,yDAAwB;;AAE1C,YAAY,kDAAiB;AAC7B;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA,uBAAuB,6CAAO;AAC9B,sBAAsB,sDAAqB,CAAC,8CAAQ;AACpD,wBAAwB,0DAAyB;;AAEjD;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA,QAAQ,0DAAyB;AACjC,QAAQ,yDAAwB;;AAEhC,mBAAmB,0BAA0B;AAC7C;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAgE;AAC3B;;;;AAIrC;;AAEA;;AAEA;AACA,MAAM,iEAAa;AACnB,MAAM,iEAAa,CAAC,2DAAY;AAChC;;;AAGA;;AAEA;;AAEA,WAAW,uEAAmB;AAC9B;;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKe;;;;AAIf;AACA,iBAAiB,6CAAO;AACxB,0DAA0D,KAAK;AAC/D;AACA;;;AAGA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC,2BAA2B,6CAAO;;AAElC;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,iDAAW;AAC1B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,iDAAW;AAC1B;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,6CAAO;AAC7B,6CAA6C,IAAI,IAAI,IAAI;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,IAAI;;AAE1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,IAAI;;AAE3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,CAAC;AACD,uBAAuB,6CAAO;AAC9B,gBAAgB,8CAAQ;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"chords.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chords\"] = factory();\n\telse\n\t\troot[\"chords\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import * as utils from './utils';\r\nimport {\r\n    noteMap,\r\n    degreeMap,\r\n    scaleMap\r\n} from './maps'\r\n\r\nfunction caculateChord({\r\n    root,\r\n    type,\r\n    add,\r\n    omit,\r\n    on\r\n}, initOctave, signType = '#') {\r\n    let\r\n        result = [],\r\n        intervalArr = utils.typeToInterval(type),\r\n        rootInterval = noteMap[root];\r\n\r\n    add.map(degree => {\r\n        intervalArr.push(degreeMap[degree]);\r\n    })\r\n\r\n    intervalArr.sort((a, b) => {\r\n        return a - b;\r\n    });\r\n\r\n    for (let i = 0; i < omit.length; i++) {\r\n        for (let j = 0; j < intervalArr.length; j++) {\r\n            if (omit[i] == intervalArr[j]);\r\n            intervalArr.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    let abInterval = utils.absoluteIntervalArr(rootInterval, intervalArr)\r\n    if (initOctave) result = utils.intervalArrToNotesO(abInterval, initOctave, signType);\r\n    else result = utils.intervalArrToNotes(abInterval, signType);\r\n\r\n    if (on) utils.replaceRoot(result, on, initOctave);\r\n    return result;\r\n}\r\n\r\nfunction caculateScaleChords({\r\n    root,\r\n    type\r\n}, initOctave, signType = '#') {\r\n    let\r\n        chordsArr = [],\r\n        extendIntervalArr = [],\r\n\r\n        rootInterval = noteMap[root],\r\n        intervalArr = utils.scaleToInterval(scaleMap[type]),\r\n        abIntervalArr = utils.absoluteIntervalArr(rootInterval, intervalArr);\r\n\r\n    // get the intervals with three more notes in a scale\r\n    extendIntervalArr = extendIntervalArr.concat(abIntervalArr);\r\n    for (let i = 1; i < 5; i++) {\r\n        extendIntervalArr.push(abIntervalArr[i] + 12);\r\n    }\r\n\r\n    let notes = initOctave ?\r\n        utils.intervalArrToNotesO(extendIntervalArr, initOctave, signType) :\r\n        utils.intervalArrToNotes(extendIntervalArr, initOctave);\r\n\r\n    for (let i = 0; i < abIntervalArr.length; i++) {\r\n        chordsArr.push([notes[i], notes[i + 2], notes[i + 4]]);\r\n    }\r\n\r\n    return chordsArr;\r\n}\r\n\r\nexport {\r\n    caculateChord,\r\n    caculateScaleChords\r\n}","import {caculateChord, caculateScaleChords} from './caculators';\r\nimport {strToOptions} from './utils';\r\n\r\n\r\n\r\nfunction chord(strOrOptions, initOctave, signType) {\r\n\r\n    // validateChord(arguments);\r\n\r\n    return (Object.prototype.toString.call(strOrOptions) === '[object Object]')\r\n    ? caculateChord(strOrOptions, initOctave, signType)\r\n    : caculateChord(strToOptions(strOrOptions), initOctave, signType);\r\n}\r\n\r\n\r\nfunction scaleChords(options, initOctave, signType) {\r\n\r\n    // validateScaleChords(arguments);\r\n\r\n    return caculateScaleChords(options, initOctave, signType);\r\n}\r\n\r\nexport {chord, scaleChords};","let intervalMap = {\r\n    0: ['C'],\r\n    1: ['C#', 'Db'],\r\n    2: ['D'],\r\n    3: ['D#', 'Bb'],\r\n    4: ['E'],\r\n    5: ['F'],\r\n    6: ['F#', 'Gb'],\r\n    7: ['G'],\r\n    8: ['G#', 'Ab'],\r\n    9: ['A'],\r\n    10: ['A#', 'Bb'],\r\n    11: ['B']\r\n}\r\n\r\nlet noteMap = {\r\n    'C': 0,\r\n    'C#': 1,\r\n    'Db': 1,\r\n    'D': 2,\r\n    'D#': 3,\r\n    'Eb': 3,\r\n    'E': 4,\r\n    'Fb': 4,\r\n    'E#': 5,\r\n    'F': 5,\r\n    'F#': 6,\r\n    'Gb': 6,\r\n    'G': 7,\r\n    'G#': 8,\r\n    'Ab': 8,\r\n    'A': 9,\r\n    'A#': 10,\r\n    'Bb': 10,\r\n    'B': 11,\r\n}\r\n\r\nlet degreeMap = {\r\n    2: 2,\r\n    3: 4,\r\n    4: 5,\r\n    5: 7,\r\n    6: 9,\r\n    7: 11,\r\n    8: 12, //1\r\n    9: 14, //2\r\n    10: 16, //3\r\n    11: 17, //4\r\n    12: 19, //5\r\n    13: 21, //6\r\n    14: 23, //7\r\n    15: 24 //1\r\n}\r\n\r\nlet typeMap = new Map([\r\n    ['m7', [3, 7, 10]],\r\n    ['m9', [3, 7, 10, 14]],\r\n    ['m11', [3, 7, 10, 14, 17]],\r\n    ['M7', [4, 7, 11]],\r\n    ['M9', [4, 7, 10, 14]],\r\n    ['M11', [4, 7, 10, 14, 17]],\r\n    ['aug', [4, 8]],\r\n    ['dim', [3, 6]],\r\n    ['sus2', [2, 7]],\r\n    ['sus4', [5, 7]],\r\n    ['7', [3, 7, 11]],\r\n    ['9', [3, 7, 11, 14]],\r\n    ['11', [3, 7, 11, 14, 17]],\r\n    ['m', [3, 7]],\r\n    ['', [4, 7]]\r\n])\r\n\r\nlet scaleMap = {\r\n    'major': [2,2,1,2,2,2,1],\r\n    'minor': [2,1,2,2,1,2,2]\r\n}\r\n\r\nexport {typeMap, noteMap, intervalMap, degreeMap, scaleMap}","import {\r\n    typeMap,\r\n    noteMap,\r\n    intervalMap,\r\n    scaleMap\r\n} from './maps'\r\n\r\n\r\n\r\nfunction typeToInterval(type) {\r\n    let result = typeMap.get(type);\r\n    if (!result) throw `can't find a chord type matched ${type}`;\r\n    return result;\r\n}\r\n\r\n\r\nfunction replaceRoot(result, note, initOctave) {\r\n    if (initOctave) {\r\n        let root = result[0];\r\n        let flagInterval = noteMap[result[1]];\r\n        let noteInterval = noteMap[note];\r\n\r\n        if (flagInterval = noteInterval) return;\r\n        else if (flagInterval > noteInterval) {\r\n            result.splice(0, 1, note + initOctave);\r\n        } else {\r\n            result.splice(0, 1, note + (initOctave - 1));\r\n        }\r\n\r\n        result.push(getRoot(root) + (getNumber(root) + 1));\r\n    } else {\r\n        result.unshift(note);\r\n    }\r\n}\r\n\r\n\r\n// Get all the absolute intervals, the result array will convert to notes directly.\r\nfunction absoluteIntervalArr(rootInterval, intervalArr) {\r\n    let result = [rootInterval];\r\n    let abInterval;\r\n\r\n    for (let interval of intervalArr) {\r\n        abInterval = rootInterval + interval;\r\n        result.push(abInterval);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nfunction intervalArrToNotesO(intervalArr, initOctave, signType) {\r\n\r\n    let result = [],\r\n        octave,\r\n        note,\r\n        noteKey,\r\n        signIndex = getSignIndex(signType);\r\n\r\n    for (let interval of intervalArr) {\r\n        octave = initOctave;\r\n        while (interval >= 12) {\r\n            interval -= 12;\r\n            octave++;\r\n        }\r\n\r\n        note = intervalMap[interval];\r\n        noteKey = note[signIndex] ? note[signIndex] : note[0];\r\n\r\n        result.push(noteKey + octave);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction intervalArrToNotes(intervalArr, signType) {\r\n    let result = [],\r\n        note,\r\n        noteKey,\r\n        signIndex = getSignIndex(signType);\r\n\r\n    for (let interval of intervalArr) {\r\n        while (interval >= 12) {\r\n            interval -= 12;\r\n        }\r\n\r\n        note = intervalMap[interval];\r\n        noteKey = note[signIndex] ? note[signIndex] : note[0];\r\n\r\n        result.push(noteKey);\r\n\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nfunction getRoot(str) {\r\n    return str.match(/[A-G](#|b)?/)[0];\r\n}\r\n\r\nfunction getNumber(str) {\r\n    return Number(str.match(/\\d/)[0]);\r\n}\r\n\r\nfunction getType(str) {\r\n\r\n    let result = null;\r\n    for (let [key] of typeMap) {\r\n        let reg = new RegExp(`^[A-G](#|b)?(${key}\\\\d{0,2})`);\r\n\r\n        if (result = str.match(reg)) {\r\n            return result[2];\r\n        }\r\n    }\r\n}\r\n\r\nfunction getAdd(str) {\r\n    let result = [];\r\n    let reg = /add(\\d{1,2})/g;\r\n\r\n    let addItem;\r\n    while (addItem = reg.exec(str)) {\r\n        result.push(addItem[1]) // index从0开始\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getOmit(str) {\r\n    let result = [];\r\n    let reg = /omit(\\d{1,2})/g;\r\n\r\n    let addItem;\r\n    while (addItem = reg.exec(str)) {\r\n        result.push(addItem[1]) // index从0开始\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getOn(str) {\r\n    let result = str.match(/\\/([A-G](#|b)?)/);\r\n    if (result) {\r\n        return result[1];\r\n    }\r\n}\r\n\r\nfunction getSignIndex(signType) {\r\n    return (signType == '#') ? 0 : 1;\r\n}\r\n\r\n\r\nfunction strToOptions(str) {\r\n    let options = {\r\n        root: getRoot(str),\r\n        type: getType(str),\r\n        add: getAdd(str),\r\n        omit: getOmit(str),\r\n        on: getOn(str),\r\n    }\r\n\r\n    return options;\r\n}\r\n\r\n\r\nfunction reverseMap(map) {\r\n    let newMap = Object.create(null);\r\n\r\n    for (let i in map) {\r\n        newMap[map[i]] = i;\r\n    }\r\n\r\n    return newMap;\r\n}\r\n\r\n\r\nfunction getScale({\r\n    root,\r\n    type,\r\n}, initOctave, signType = '#') {\r\n    let rootInterval = noteMap[root],\r\n        scale = scaleMap[type],\r\n        intervalArr = scaleToInterval(scale),\r\n        abIntervalArr = absoluteIntervalArr(rootInterval, intervalArr);\r\n\r\n    if (initOctave) return intervalArrToNotesO(abIntervalArr, initOctave, signType);\r\n    else return intervalArrToNotes(abIntervalArr, signType);\r\n}\r\n\r\nfunction scaleToInterval(intervalArr) {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < intervalArr.length; i++) {\r\n        if (!i) result.push(intervalArr[i]);\r\n        else {\r\n            result.push(result[i - 1] + intervalArr[i]);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nexport {\r\n    getScale,\r\n    getRoot,\r\n    getType,\r\n    getAdd,\r\n    strToOptions,\r\n    reverseMap,\r\n    intervalArrToNotes,\r\n    intervalArrToNotesO,\r\n    typeToInterval,\r\n    replaceRoot,\r\n    absoluteIntervalArr,\r\n    scaleToInterval\r\n}"],"sourceRoot":""}